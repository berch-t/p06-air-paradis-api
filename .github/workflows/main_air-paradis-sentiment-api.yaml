name: Build and deploy Sentiment Analysis App to Azure

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: air-paradis-sentiment-api
  AZURE_WEBAPP_DOMAIN: air-paradis-sentiment-api-dkceasgya2cvaehc.francecentral-01.azurewebsites.net
  PYTHON_VERSION: '3.9'
  APPINSIGHTS_INSTRUMENTATION_KEY: '9af56b4d-4ad5-4643-ba29-41d154893ad4'
  RESOURCE_GROUP: 'p06-AirParadisResources'
  APP_INSIGHTS_NAME: 'air-paradis-sentiment-monitoring'

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (without LFS)
        uses: actions/checkout@v3
        with:
          lfs: false  # D'abord sans LFS pour éviter l'erreur
          fetch-depth: 0
      
      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          mkdir -p deployment_package
          
          # Copying all core files except models
          cp -r api.py app.py app_insights.py application.py init_models.py startup.sh runtime.txt .streamlit requirements.txt deployment_package/
          
          # Create web.config file
          echo '<?xml version="1.0" encoding="utf-8"?>' > deployment_package/web.config
          echo '<configuration>' >> deployment_package/web.config
          echo '  <system.webServer>' >> deployment_package/web.config
          echo '    <handlers>' >> deployment_package/web.config
          echo '      <add name="PythonHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified"/>' >> deployment_package/web.config
          echo '    </handlers>' >> deployment_package/web.config
          echo '    <httpPlatform processPath="%home%\python\3.9\python.exe" arguments="-m gunicorn application:app --bind=0.0.0.0:%HTTP_PLATFORM_PORT% --timeout 600" requestTimeout="00:10:00" startupTimeLimit="300" startupRetryCount="5" stdoutLogEnabled="true" stdoutLogFile="\\?\%home%\LogFiles\stdout">' >> deployment_package/web.config
          echo '      <environmentVariables>' >> deployment_package/web.config
          echo '        <environmentVariable name="PYTHONUNBUFFERED" value="1"/>' >> deployment_package/web.config
          echo '        <environmentVariable name="PORT" value="%HTTP_PLATFORM_PORT%"/>' >> deployment_package/web.config
          echo '        <environmentVariable name="PYTHONPATH" value="%home%\site\wwwroot"/>' >> deployment_package/web.config
          echo '        <environmentVariable name="APPINSIGHTS_INSTRUMENTATION_KEY" value="9af56b4d-4ad5-4643-ba29-41d154893ad4"/>' >> deployment_package/web.config
          echo '        <environmentVariable name="SIMULATION_MODE" value="false"/>' >> deployment_package/web.config
          echo '        <environmentVariable name="WEBSITE_HOSTNAME" value="'${{ env.AZURE_WEBAPP_DOMAIN }}'"/>' >> deployment_package/web.config
          echo '      </environmentVariables>' >> deployment_package/web.config
          echo '    </httpPlatform>' >> deployment_package/web.config
          echo '  </system.webServer>' >> deployment_package/web.config
          echo '</configuration>' >> deployment_package/web.config
          echo "Created web.config with simulation mode disabled"
          
          # Make startup script executable
          chmod +x deployment_package/startup.sh
          
          # Create directories structure
          mkdir -p deployment_package/models/bert
          mkdir -p deployment_package/logs
          
          # Create config file for BERT
          echo '{"max_sequence_length": 64, "batch_size": 8, "model_type": "distilbert-base-uncased"}' > deployment_package/models/bert/config.json
          
          # Copy logo if exists
          if [ -f "air-paradis-logo.png" ]; then
            cp air-paradis-logo.png deployment_package/
          fi

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: './deployment_package'
          
      - name: Upload Models to Azure Web App
        run: |
          echo "Preparing to upload models directly to Azure Web App via FTPS..."
          
          # Configuration pour FTP
          APP_NAME="${{ env.AZURE_WEBAPP_NAME }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
          
          # Get publish profile credentials
          PUBLISH_PROFILE=$(echo '${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}' | grep -oP '(?<=userName=")[^"]*|(?<=userPWD=")[^"]*' | head -2)
          FTP_USERNAME=$(echo "$PUBLISH_PROFILE" | head -1)
          FTP_PASSWORD=$(echo "$PUBLISH_PROFILE" | tail -1)
          FTP_HOST=$(echo "${{ env.AZURE_WEBAPP_DOMAIN }}" | sed 's/\.azurewebsites\.net/.ftp.azurewebsites.windows.net/')
          
          # Créer un script pour transférer les modèles via FTP sécurisé
          echo "Creating credentials file for FTP..."
          echo "machine $FTP_HOST login $FTP_USERNAME password $FTP_PASSWORD" > ~/.netrc
          chmod 600 ~/.netrc
          
          echo "Setting up models directory for upload..."
          if [ -d "models/bert" ]; then
            echo "Models directory found locally, using these files"
            mkdir -p upload_models/models/bert
            cp -r models/bert/* upload_models/models/bert/
          elif [ -d "preloaded_models/bert" ]; then
            echo "Using preloaded models directory"
            mkdir -p upload_models/models/bert
            cp -r preloaded_models/bert/* upload_models/models/bert/
          else
            echo "WARNING: No model files found locally"
          fi
          
          if [ -d "upload_models" ]; then
            echo "Starting model upload..."
            # Utiliser CURL pour télécharger le dossier models via FTP
            cd upload_models
            find . -type f -exec curl -T {} -u $FTP_USERNAME:$FTP_PASSWORD ftps://$FTP_HOST/site/wwwroot/{} --ssl \;
            echo "Model upload completed"
          else
            echo "No models to upload"
          fi
          
      - name: Post-deployment information
        run: |
          echo "✅ Application deployed to https://${{ env.AZURE_WEBAPP_DOMAIN }}"
          echo "The application may take a few minutes to start as it initializes the BERT model."
          echo "To check the application status, visit https://${{ env.AZURE_WEBAPP_DOMAIN }}/health"
          echo "For more details, visit the Azure portal > App Service > ${{ env.AZURE_WEBAPP_NAME }} > Monitoring > Log stream"