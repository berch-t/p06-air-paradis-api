name: Build and deploy Sentiment Analysis App to Azure

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: air-paradis-sentiment-api
  PYTHON_VERSION: '3.9'
  APPINSIGHTS_INSTRUMENTATION_KEY: '9af56b4d-4ad5-4643-ba29-41d154893ad4'
  RESOURCE_GROUP: 'p06-AirParadisResources'
  APP_INSIGHTS_NAME: 'air-paradis-sentiment-monitoring'

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit tests
        run: |
          python -m pytest tests/

      - name: Create deployment package
        run: |
          # Create a directory for the deployment package
          mkdir -p deployment_package
          
          # Copy the required files to the deployment package
          cp -r api.py app.py application.py init_models.py startup.sh requirements.txt runtime.txt .streamlit tests deployment_package/
          
          # Create necessary directories and copy models if they exist
          mkdir -p deployment_package/models
          if [ -d "models/bert" ]; then
            cp -r models/bert deployment_package/models/
            echo "Modèle BERT existant copié dans le package de déploiement"
          else
            mkdir -p deployment_package/models/bert
            echo "Répertoire models/bert créé (vide)"
          fi
          
          # Copy preloaded models if they exist
          if [ -d "preloaded_models" ]; then
            cp -r preloaded_models deployment_package/
            echo "Modèles préchargés copiés dans le package de déploiement"
          fi
          
          # Create logs directory
          mkdir -p deployment_package/logs
          
          # Copy the logo if it exists
          cp -r air-paradis-logo.png deployment_package/ || echo "Logo file not found, continuing..."
          
          # Create a web.config file for Azure App Service
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="PythonHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified"/>
              </handlers>
              <httpPlatform processPath="bash" arguments="startup.sh" requestTimeout="00:04:00" startupTimeLimit="120" startupRetryCount="3" stdoutLogEnabled="true" stdoutLogFile="logs\api.log">
                <environmentVariables>
                  <environmentVariable name="PYTHONUNBUFFERED" value="1"/>
                  <environmentVariable name="APPINSIGHTS_INSTRUMENTATION_KEY" value="${{ env.APPINSIGHTS_INSTRUMENTATION_KEY }}"/>
                </environmentVariables>
              </httpPlatform>
            </system.webServer>
          </configuration>' > deployment_package/web.config

      - name: Create app_insights.py file
        run: |
          # Créer un fichier de configuration pour Application Insights
          cat > deployment_package/app_insights.py << EOF
          import os
          import requests
          import datetime
          import json
          import logging

          # Configuration pour Application Insights
          APPINSIGHTS_INSTRUMENTATION_KEY = os.environ.get('APPINSIGHTS_INSTRUMENTATION_KEY', '9af56b4d-4ad5-4643-ba29-41d154893ad4')
          APPINSIGHTS_ENDPOINT = "https://dc.services.visualstudio.com/v2/track"

          # Configuration du logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
              handlers=[
                  logging.FileHandler("app_insights.log"),
                  logging.StreamHandler()
              ]
          )
          logger = logging.getLogger(__name__)

          def send_event(event_name, properties=None):
              """
              Envoie un événement personnalisé à Application Insights
              """
              if not APPINSIGHTS_INSTRUMENTATION_KEY:
                  logger.warning("Clé d'instrumentation Application Insights non configurée.")
                  return False
              
              try:
                  # Création du payload pour Application Insights
                  payload = {
                      "name": "Microsoft.ApplicationInsights.Event",
                      "time": datetime.datetime.utcnow().isoformat() + "Z",
                      "iKey": APPINSIGHTS_INSTRUMENTATION_KEY,
                      "tags": {
                          "ai.cloud.roleInstance": "sentiment-analysis-api"
                      },
                      "data": {
                          "baseType": "EventData",
                          "baseData": {
                              "ver": 2,
                              "name": event_name,
                              "properties": properties or {}
                          }
                      }
                  }
                  
                  # Envoi de la télémétrie
                  response = requests.post(APPINSIGHTS_ENDPOINT, json=payload)
                  if response.status_code != 200:
                      logger.warning(f"Erreur lors de l'envoi à Application Insights: {response.status_code} - {response.text}")
                      return False
                  else:
                      logger.info(f"Événement '{event_name}' envoyé à Application Insights")
                      return True
              except Exception as e:
                  logger.error(f"Erreur lors de l'envoi à Application Insights: {str(e)}")
                  return False

          def send_to_appinsights(tweet, prediction, is_incorrect=False):
              """
              Envoie des données de télémétrie à Azure Application Insights
              """
              event_name = "IncorrectPrediction" if is_incorrect else "Prediction"
              properties = {
                  "tweet": tweet,
                  "predicted_sentiment": prediction,
                  "is_incorrect": str(is_incorrect)
              }
              
              return send_event(event_name, properties)

          # Test de l'envoi à Application Insights au démarrage
          if __name__ == "__main__":
              success = send_event("AppStarted", {"status": "Application démarrée avec succès"})
              print(f"Test d'envoi à Application Insights: {'Réussi' if success else 'Échoué'}")
          EOF

      - name: 'Login to Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: './deployment_package'

      - name: Configure Action Group and Alert Rules
        run: |
          echo "Configuration des alertes Application Insights..."
          
          # Installer l'extension Azure CLI pour Application Insights si nécessaire
          az extension add --name application-insights
          
          # Attendre 30 secondes pour s'assurer que le déploiement a terminé
          sleep 30
          
          # Création du groupe d'actions avec un email
          echo "Création du groupe d'actions..."
          az monitor action-group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ModelErrorAlerts \
            --short-name ModelErr \
            --action email berchet.thomas@gmail.com EmailToAdmin
          
          # Création d'une alerte basée sur des requêtes de logs
          echo "Création de l'alerte..."
          
          # Script PowerShell pour créer une alerte basée sur des logs Analytics
          cat > create-alert.ps1 << 'EOL'
          Connect-AzAccount -ServicePrincipal -Tenant "$env:ARM_TENANT_ID" -Credential (New-Object System.Management.Automation.PSCredential "$env:ARM_CLIENT_ID", (ConvertTo-SecureString "$env:ARM_CLIENT_SECRET" -AsPlainText -Force))
          
          $ResourceGroup = "$env:RESOURCE_GROUP"
          $AppInsightsName = "$env:APP_INSIGHTS_NAME"
          $AlertName = "IncorrectPredictionAlert"
          $ActionGroupName = "ModelErrorAlerts"
          
          # Obtenir la référence Application Insights
          $AppInsights = Get-AzApplicationInsights -ResourceGroupName $ResourceGroup -Name $AppInsightsName
          
          # Obtenir le groupe d'actions
          $ActionGroup = Get-AzActionGroup -ResourceGroupName $ResourceGroup -Name $ActionGroupName
          
          # Créer l'alerte basée sur une requête de logs
          $Query = "customEvents | where name == 'IncorrectPrediction' | count"
          $Schedule = New-AzScheduledQueryRuleSchedule -FrequencyInMinutes 5 -TimeWindowInMinutes 5
          $Trigger = New-AzScheduledQueryRuleTrigger -ThresholdOperator GreaterThan -Threshold 3
          $Source = New-AzScheduledQueryRuleSource -Query $Query -DataSourceId $AppInsights.Id
          $Aznsaction = New-AzScheduledQueryRuleAznsActionGroup -ActionGroup $ActionGroup.Id -EmailSubject "Alert from Air Paradis Sentiment Analysis"
          $AlertingAction = New-AzScheduledQueryRuleAlertingAction -AznsAction $Aznsaction -Severity 1 -Trigger $Trigger
          
          New-AzScheduledQueryRule -ResourceGroupName $ResourceGroup -Location $AppInsights.Location -Name $AlertName -Enabled $true -Description "Alert on incorrect predictions" -Schedule $Schedule -Source $Source -Action $AlertingAction
          EOL
          
          # Exécuter le script PowerShell
          export ARM_TENANT_ID=$(az account show --query "tenantId" -o tsv)
          export ARM_CLIENT_ID=$(az account show --query "user.name" -o tsv)
          export ARM_CLIENT_SECRET="${{ secrets.AZURE_CREDENTIALS }}"
          export RESOURCE_GROUP="${{ env.RESOURCE_GROUP }}"
          export APP_INSIGHTS_NAME="${{ env.APP_INSIGHTS_NAME }}"
          
          # Installer PowerShell si nécessaire
          which pwsh || apt-get update && apt-get install -y powershell
          
          # Exécuter le script PowerShell
          pwsh -File create-alert.ps1 || echo "Erreur lors de la création de l'alerte. Continuez manuellement."
        continue-on-error: true